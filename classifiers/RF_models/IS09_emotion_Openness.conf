
///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for IS09 emotion challenge< //////////////////
/////////                                                            //////////////////
///////// (c) audEERING UG (haftungsbeschränkt),                     //////////////////
/////////     All rights reserverd.                                  //////////////////
///////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match 
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
 ; this line configures the default data memory:
instance[dataMemory].type=cDataMemory
;instance[waveIn].type=cWaveSource
instance[fr1].type=cFramer
instance[pe2].type=cVectorPreemphasis
instance[w1].type=cWindower
instance[fft1].type=cTransformFFT
instance[fftmp1].type=cFFTmagphase
instance[mspec].type=cMelspec
instance[mfcc].type=cMfcc
instance[mzcr].type=cMZcr
instance[acf].type=cAcf
instance[cepstrum].type=cAcf
instance[pitchACF].type=cPitchACF
instance[energy].type=cEnergy
instance[lld].type=cContourSmoother
instance[delta1].type=cDeltaRegression
instance[functL1].type=cFunctionals
;instance[arffsink].type=cArffSink
;instance[mysvmsink].type=cLibsvmLiveSink
printLevelStats=0
nThreads=1

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with 
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

instance[waveIn].type=cWaveSource
[waveIn:cWaveSource]
writer.dmLevel=wave
filename=\cm[inputfile(I){test.wav}:name of input file]
buffersize=4000
monoMixdown=1

;instance[portaudioSource].type = cPortaudioSource
;[portaudioSource:cPortaudioSource]
;writer.dmLevel = wave
;monoMixdown = 1
; ; -1 is the default device
;device = \cm[device{-1}:portaudio device to use for recording, see -listDevices option]
;listDevices = \cm[listDevices{0}:add -listDevices 1 to the command-line to see a list available of portaudio devices]
;sampleRate = \cm[sampleRate{44100}:set the sampling rate in Hz for recording]
;channels = \cm[channels{2}:set the number of audio channels to record]
;nBits = 16
;audioBuffersize_sec = 0.050000


[fr1:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
copyInputName = 1
noPostEOIprocessing = 1
frameSize = 0.0250
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = left
buffersize = 1000

[pe2:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
copyInputName = 1
processArrayFields = 1
k=0.97
de = 0

[w1:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0

  // ---- LLD -----

[fft1:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmp1:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[mspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=mspec1
copyInputName = 1
processArrayFields = 1
htkcompatible = 1
nBands = 26
usePower = 0
lofreq = 0
hifreq = 8000
inverse = 0
specScale = mel

[mfcc:cMfcc]
reader.dmLevel=mspec1
writer.dmLevel=mfcc1
copyInputName = 1
processArrayFields = 1
firstMfcc = 1
lastMfcc =  12
cepLifter = 22.0
htkcompatible = 1


[acf:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=acf
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 0

[cepstrum:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=cepstrum
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 1

[pitchACF:cPitchACF]
  ; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acf;cepstrum
writer.dmLevel=pitch
copyInputName = 1
processArrayFields=0
maxPitch = 500
voiceProb = 1
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 0
voicingCutoff = 0.550000

[energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
nameAppend=energy
rms=1
log=0

[mzcr:cMZcr]
reader.dmLevel=frames
writer.dmLevel=mzcr
copyInputName = 1
processArrayFields = 1
zcr = 1
amax = 0
mcr = 0
maxmin = 0
dc = 0

[lld:cContourSmoother]
reader.dmLevel=energy;mfcc1;mzcr;pitch
writer.dmLevel=lld
writer.levelconf.nT=10
;writer.levelconf.noHang=2
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3

// ---- delta regression of LLD ----
[delta1:cDeltaRegression]
reader.dmLevel=lld
writer.dmLevel=lld_de
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2
blocksize=1

[functL1:cFunctionals]
reader.dmLevel=lld;lld_de
writer.dmLevel=func
copyInputName = 1
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
frameSize = 0
frameStep = 0
frameMode = full
frameCenterSpecial = left
functionalsEnabled=Extremes;Regression;Moments
Extremes.max = 1
Extremes.min = 1
Extremes.range = 1
Extremes.maxpos = 1
Extremes.minpos = 1
Extremes.amean = 1
Extremes.maxameandist = 0
Extremes.minameandist = 0
 ; Note: the much better way to normalise the times of maxpos and minpos
 ; is 'turn', however for compatibility with old files the default 'frame'
 ; is kept here:
Extremes.norm = frame
Regression.linregc1 = 1
Regression.linregc2 = 1
Regression.linregerrA = 0
Regression.linregerrQ = 1
Regression.qregc1 = 0
Regression.qregc2 = 0
Regression.qregc3 = 0
Regression.qregerrA = 0
Regression.qregerrQ = 0
Regression.centroid = 0
Regression.oldBuggyQerr = 1
Regression.normInputs = 0
Regression.normRegCoeff = 0
Moments.variance = 0
Moments.stddev = 1
Moments.skewness = 1
Moments.kurtosis = 1
Moments.amean = 0

;;;;;;;;; prepare features for standard output module





;; NOTE: no concattenation to levels lld, lld_de and func needed,
;; as data are already saved correctly in these levels


/*[myFS:cDataSelector]
reader.dmLevel=functionalsA;functionalsB;functionalsNz;functionalsF0;functionalsLLD;functionalsDelta
writer.dmLevel=selectedFs
selFile=C:\Users\sag\Dropbox\Databases\BerlinSpeechEmotionDatabase\matlab\RF_FS_170_text.txt

[myclibsvm:cLibsvmSink]
reader.dmLevel=selectedFs
filename=smileoutput.lsvm
* /

 ;;\{standard_data_output.conf.inc}

instance[lldcsv].type=cCsvSink
[lldcsv:cCsvSink]
%reader.dmLevel = lld_nzsmo;lldA_smo;lldB_smo;lld_nzsmo_de;lldA_smo_de;lldB_smo_de
;reader.dmLevel=functionalsA;functionalsB;functionalsNz;functionalsF0;functionalsLLD;functionalsDelta
reader.dmLevel=func
filename=\cm[output(O){output.csv}:output csv file for lld, set to a filename to enable lld output]
append = 1
delimChar =,
timestamp = 0
number = 0
printHeader = 1

/* ***********************
 * old data output config, obsoleted by standard_data_output.conf.inc


  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

// ----- you might need to customise the arff output to suit your needs: ------
*/

[componentInstances:cComponentManager]
instance[arffsink].type=cArffSink

[arffsink:cArffSink]
reader.dmLevel=func
 ; do not print "frameNumber" attribute to ARFF file
frameIndex = 0
frameTime = 0
 ; name of output file as commandline option
filename=\cm[arffout(O){output.arff}:name of WEKA Arff output file]
 ; name of @relation in the ARFF file
relation=\cm[corpus{SMILEfeatures}:corpus name, arff relation]
 
 ; name of the current instance (usually file name of input wave file)
;instanceName=\cm[instname(N){noname}:name of arff instance]
 ;; use this line instead of the above to always set the instance name to the
 ;; name of the input wave file
 ;instanceName=\cm[inputfile]

 ; name of class label
class[0].name = O
 ; list of nominal classes OR "numeric"
class[0].type = numeric // \cm[classes{Male,Female}:all classes for arff file attribute]
 ; the class label or value for the current instance
target[0].all = \cm[classlabel(a){0}:instance class label]
 ; append to an existing file, so multiple calls of SMILExtract on different
 ; input files append to the same output ARFF file
append=0

/*

[mysvmsink:cLibsvmLiveSink]
;;reader.dmLevel=functionalsA;functionalsB;functionalsNz;functionalsF0;functionalsLLD;functionalsDelta
reader.dmLevel=func
;fselection[0]=models/select_features_before_map.txt
;mapVector[0]=models/subscapce_1_mapper.txt
;znorm[0]=models/Znorm_VAM.norm
;model[1]=models/subscapce_2.model
;scale[1]=models/subscapce_2.scale
;mapVector[1]=models/subscapce_2_mapper.txt
;znorm[1]=models/Znorm_VAM.norm
;model[2]=models/subscapce_3.model
;scale[2]=models/subscapce_3.scale
;mapVector[2]=models/subscapce_3_mapper.txt
;znorm[2]=models/Znorm_VAM.norm
printResult=1
multiModelMode=0
;classes[0]=classnames.txt
;predictProbability=1
;resultRecp=random
;model=svm.model
;scale=svm.scale
model=/home/sag/work/ME/platform_smilextract2/svmarousal.model
scale=/home/sag/work/ME/platform_smilextract2/svmarousal.scale
;model=svmarousal.model
;scale=svmarousal.scale
*/
